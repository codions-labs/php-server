#!/bin/bash -e

main() {
    install-extras
    setup-environment-vars
    setup-nginx-user
    generate-system-configuration

    if ! checkout-exists; then
        perform-git-checkout
    fi

    apply-nginx-permissions
    generate-user-configuration

    if composer.lock-exists && ! isTrue "${NO_COMPOSER_INSTALL}"; then
        run-composer-install
    fi

    run-user-scripts
    exec-supervisord
}


checkout-exists()      { [ -d "$CODE_BASE/.git" ]; }
composer.lock-exists() { [ -f "$CODE_BASE/composer.lock" ]; }
glob-list()            ( shopt -s nullglob; echo $1; )

setup-environment-vars() {
    # Set up CODE_BASE, PUBLIC_DIR, and WEBROOT

    CODE_BASE=${CODE_BASE:-/var/www/html}
    export CODE_BASE="$(realpath $CODE_BASE)"   # must exist!

    cd "$CODE_BASE"

    export PUBLIC_DIR="$(realpath ${PUBLIC_DIR-.})" # must exist!
    export WEBROOT="${WEBROOT-${PUBLIC_DIR}}"
}


generate-system-configuration() {
    expand-templates /tpl /
    # Git config
    [[ -z "$GIT_NAME" ]]  || git config --system user.name  "$GIT_NAME";
    [[ -z "$GIT_EMAIL" ]] || git config --system user.email "$GIT_EMAIL";
    git config --system push.default simple
}

ensure-dir() {
    [[ -d "$1" ]] || mkdir -p "$1"
}

expand-template() {
    # Expand precisely one template file to a target filename
    reject-nginx-writable "$1"
    ensure-dir "$(dirname "$2")"
    dockerize -template "$1:$2"
}

reject-nginx-writable() {
    dv=($(stat -Lc "%U %G %A" "$1")) && (
        [[ "${dv[0]}" == "nginx" ]] || [[ "${dv[2]:8:1}" == "w" ]] ||
        ( [[ "${dv[2]:5:1}" == "w" ]] && [[ "${NGINX_GROUPS[*]}" =~ ^(.* |)${dv[1]}( .*|)$ ]] )
    ) && echo >&2 "${2-Template} file $1 must not be writable by nginx" && exit 1
    true
}

expand-templates() {
    # Setup configuration files based on environment
    local src="$1" dst="${2-/}"
    cd "$CODE_BASE"     # process everything relative to CODE_BASE
    if [[ -d "$src" ]]; then
        # Source directory exists: expand subtree under destination dir
        ensure-dir "$dst"
        src="$(realpath "$src")" dst="$(realpath "$dst")"
        for f in $(find "$src" -type f); do
            expand-template "$f" "${dst%/}${f#$src}"
        done
    fi
}

setup-nginx-user() {
    # Re-create nginx user w/specified UID/GID
    if [ ! -z "$PUID" ]; then
        if [ -z "$PGID" ]; then PGID=${PUID}; fi
        deluser nginx
        addgroup -g ${PGID} nginx
        adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx -u ${PUID} nginx
    fi
    NGINX_GROUPS=($(groups nginx))
}

grant() { for f in $4; do ch$1 -Rf $2 "$f" && chmod -Rf $3 $f ; done }

apply-nginx-permissions() (
    shopt -s globstar
    grant grp nginx g+r "${NGINX_READABLE-.}"
    grant grp nginx g+w "$NGINX_WRITABLE"

    [[ -z "$NGINX_NO_RWX$NGINX_NO_WRITE" ]] || as-developer  # ensure dev account exists
    grant own developer go-w   "$NGINX_NO_WRITE"
    grant own developer go-rwx "$NGINX_NO_RWX"
)

run-composer-install() {
    # Try auto install for composer
    as-developer composer install --working-dir="$CODE_BASE" $COMPOSER_OPTIONS
}

run-user-scripts() {
    if isTrue "$RUN_SCRIPTS"; then
        RUN_SCRIPTS="$CODE_BASE/scripts";
    fi
    if [[ ! -z "$RUN_SCRIPTS" ]] && [[ -d "$RUN_SCRIPTS" ]]; then
        # run scripts in number order
        for i in $(glob-list "$RUN_SCRIPTS/*"); do
            reject-nginx-writable "$i"
            chmod ug+x "$i" && "$i"
        done
    fi
}

perform-git-checkout() {
    # Pull down code from git for our site!
    if [ ! -z "$GIT_REPO" ]; then
        # Remove the test index file if you are pulling in a git repo
        if ! isTrue "${REMOVE_FILES-true}"; then
            echo "skipping removal of files"
        else
            rm -Rf $CODE_BASE/*
        fi
        GIT_COMMAND='git clone '
        if [ ! -z "$GIT_BRANCH" ]; then
            GIT_COMMAND=${GIT_COMMAND}" -b ${GIT_BRANCH}"
        fi
        if [ -z "$GIT_USERNAME" ] && [ -z "$GIT_PERSONAL_TOKEN" ]; then
            GIT_COMMAND=${GIT_COMMAND}" ${GIT_REPO}"
        else
            if isTrue "$GIT_USE_SSH"; then
                GIT_COMMAND=${GIT_COMMAND}" ${GIT_REPO}"
            else
                GIT_COMMAND=${GIT_COMMAND}" https://${GIT_USERNAME}:${GIT_PERSONAL_TOKEN}@${GIT_REPO}"
            fi
        fi
        as-developer ${GIT_COMMAND} "$CODE_BASE"
    fi
}

generate-user-configuration() {
    # Enable custom nginx config files if they exist
    for tag in "" "-ssl"; do
        if [ -f $CODE_BASE/conf/nginx/nginx-site$tag.conf ]; then
            cp $CODE_BASE/conf/nginx/nginx-site$tag.conf  /etc/nginx/sites-available/default$tag.conf
        fi
    done
    # Install env-templated files if they exist - paths are relative to $CODE_BASE
    for tpl in ${DOCKERIZE_TEMPLATES}; do
        # deliberately leaving off quotes here to split on `:`
        expand-templates ${tpl/:/ }
    done
    [ -z "$GLOBAL_REQUIRE" ] || as-developer composer global require "$GLOBAL_REQUIRE"
}


exec-supervisord() {
    # Start supervisord and services
    exec /usr/bin/supervisord -n -c /etc/supervisord.conf
}

main

