#!/bin/bash

main() {
    install-extras || exit 1
    setup-environment-vars
    generate-system-configuration
    setup-nginx-user

    if ! checkout-exists; then
        perform-git-checkout
    fi

    generate-user-configuration

    if composer.json-exists; then
        run-composer-install
    fi

    if user-scripts-exist; then
        run-user-scripts
    fi

    exec-supervisord
}


checkout-exists()      { [ -d "$CODE_BASE/.git" ]; }
composer.json-exists() { [ -f "$CODE_BASE/composer.json" ]; }
user-scripts-exist()   { [ -d "$CODE_BASE/scripts/" ]; }

setup-environment-vars() {
    # Set up CODE_BASE and WEBROOT

    CODE_BASE=${CODE_BASE:-/var/www/html}
    export CODE_BASE=${CODE_BASE%/}

    WEBROOT=${WEBROOT:-${CODE_BASE}${PUBLIC_DIR:+/${PUBLIC_DIR#/}}}
    export WEBROOT=${WEBROOT%/}
}


generate-system-configuration() {

    process-templates-from /tpl

    # Git config
    [[ -z "$GIT_NAME" ]]  || git config --system user.name  "$GIT_NAME";
    [[ -z "$GIT_EMAIL" ]] || git config --system user.email "$GIT_EMAIL";
    git config --system push.default simple

}


# Configuration templates

process-templates-from() {
    local src=$1
    if [[ -d "$src" ]]; then
        # Setup configuration files based on environment
        for f in $(find "$src" -type f); do
            local dn=$(dirname ${f#$src})
            [[ -d "$dn" ]] || mkdir -p "$dn" || exit 1
            dockerize -template "$f:${f#$src}" || exit 1
        done
    fi
}

setup-nginx-user() {
    # Re-create nginx user w/specified UID/GID
    if [ ! -z "$PUID" ]; then
        if [ -z "$PGID" ]; then
            PGID=${PUID}
        fi
        deluser nginx
        addgroup -g ${PGID} nginx
        adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx -u ${PUID} nginx
    else
        # Always chown webroot for better mounting
        chown -Rf nginx.nginx $CODE_BASE
    fi
}

perform-git-checkout() {
    # Pull down code from git for our site!
    if [ ! -z "$GIT_REPO" ]; then
        # Remove the test index file if you are pulling in a git repo
        if ! isTrue "${REMOVE_FILES-true}"; then
            echo "skipping removal of files"
        else
            rm -Rf $CODE_BASE/*
        fi
        GIT_COMMAND='git clone '
        if [ ! -z "$GIT_BRANCH" ]; then
            GIT_COMMAND=${GIT_COMMAND}" -b ${GIT_BRANCH}"
        fi
        if [ -z "$GIT_USERNAME" ] && [ -z "$GIT_PERSONAL_TOKEN" ]; then
            GIT_COMMAND=${GIT_COMMAND}" ${GIT_REPO}"
        else
            if isTrue "$GIT_USE_SSH"; then
                GIT_COMMAND=${GIT_COMMAND}" ${GIT_REPO}"
            else
                GIT_COMMAND=${GIT_COMMAND}" https://${GIT_USERNAME}:${GIT_PERSONAL_TOKEN}@${GIT_REPO}"
            fi
        fi
        as-nginx ${GIT_COMMAND} || exit 1
    fi
}

generate-user-configuration() {

    # Enable custom nginx config files if they exist
    for tag in "" "-ssl"; do
        if [ -f $CODE_BASE/conf/nginx/nginx-site$tag.conf ]; then
            cp $CODE_BASE/conf/nginx/nginx-site$tag.conf  /etc/nginx/sites-available/default$tag.conf
        fi
    done

    # Install env-templated files if they exist
    process-templates-from $CODE_BASE/conf-tpl

}


run-composer-install() {
    # Try auto install for composer
    as-nginx composer install --no-dev --working-dir=$CODE_BASE || exit 1
}


# Run custom scripts

run-user-scripts() {
    if isTrue "$RUN_SCRIPTS" ; then
        # make scripts executable incase they aren't
        chmod -Rf 750 $CODE_BASE/scripts/*
        # run scripts in number order
        for i in $CODE_BASE/scripts/*; do $CODE_BASE/scripts/$i ; done
    fi
}


exec-supervisord() {
    # Start supervisord and services
    exec /usr/bin/supervisord -n -c /etc/supervisord.conf
}


main

